// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalNotes.Controllers;

namespace PersonalNotes.Migrations
{
    [DbContext(typeof(NoteContext))]
    partial class NoteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PersonalNotes.Models.Notes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Note")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int(10)");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .HasName("FK_Notes_User");

                    b.ToTable("notes");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Date = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create your own personal notes...User friendly design and features...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            UserId = -1
                        },
                        new
                        {
                            ID = -2,
                            Date = new DateTime(2020, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Edit/delete notes...User friendly design and features...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            UserId = -2
                        },
                        new
                        {
                            ID = -3,
                            Date = new DateTime(2020, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Don't hassle to pick up notebook to make quick notes...User friendly design and features...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            UserId = -3
                        },
                        new
                        {
                            ID = -4,
                            Date = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Useful notes...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            UserId = -1
                        },
                        new
                        {
                            ID = -5,
                            Date = new DateTime(2020, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Important notes...User friendly design and features...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting.",
                            UserId = -2
                        },
                        new
                        {
                            ID = -6,
                            Date = new DateTime(2020, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quick notes...Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            UserId = -3
                        });
                });

            modelBuilder.Entity("PersonalNotes.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("fname")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lname")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Email = "sjani@ualberta.ca",
                            FirstName = "Shivani",
                            LastName = "Jani",
                            Password = "abc@123"
                        },
                        new
                        {
                            ID = -2,
                            Email = "shailza@ualberta.ca",
                            FirstName = "Shailza",
                            LastName = "Sharma",
                            Password = "xyz@123"
                        },
                        new
                        {
                            ID = -3,
                            Email = "hkour@ualberta.ca",
                            FirstName = "Harpreet",
                            LastName = "Kour",
                            Password = "pqr@123"
                        });
                });

            modelBuilder.Entity("PersonalNotes.Models.Notes", b =>
                {
                    b.HasOne("PersonalNotes.Models.User", "Users")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notes_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
